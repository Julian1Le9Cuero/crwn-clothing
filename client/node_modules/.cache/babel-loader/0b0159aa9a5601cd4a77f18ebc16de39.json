{"ast":null,"code":"import { createSelector } from \"reselect\";\n\nconst selectShop = state => state.shop;\n\nexport const selectCollections = createSelector([selectShop], shop => shop.collections);\nexport const selectCollectionsForPreview = createSelector([selectCollections], // Get all the keys of an object thatt we pass to it and gives it to us in an array\ncollections => collections ? Object.keys(collections).map(collectionKey => collections[collectionKey]) : []);\nexport const selectCollection = collectionUrlParam => createSelector([selectCollections], collections => collections ? collections[collectionUrlParam] : null);\nexport const selectIsCollectionFetching = createSelector([selectShop], shop => shop.isFetching);\n/* Make new selector to avoid error of throwing collectionIem because\r\nit sees the isFetching property from shopReducer as false\r\nwhen we reload the page*/\n\n/* there are many ways to solve this problem, but the solution with \r\nselector is just more scalable as it provides \r\nthe same solution for any other component\r\n that tries to access the same state so you dont need to write \r\n the same solution in other component */\n\nexport const selectIsCollectionsLoaded = createSelector([selectShop],\n/* Check if the collection is null, if collections is loading we get true\r\notherwise we get false*/\nshop => !!shop.collections);","map":{"version":3,"sources":["C:/Users/Julian/crwn-clothing/client/src/redux/shop/shop.selectors.js"],"names":["createSelector","selectShop","state","shop","selectCollections","collections","selectCollectionsForPreview","Object","keys","map","collectionKey","selectCollection","collectionUrlParam","selectIsCollectionFetching","isFetching","selectIsCollectionsLoaded"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAWA,KAAK,CAACC,IAApC;;AAEA,OAAO,MAAMC,iBAAiB,GAAGJ,cAAc,CAC7C,CAACC,UAAD,CAD6C,EAE5CE,IAAD,IAAUA,IAAI,CAACE,WAF8B,CAAxC;AAKP,OAAO,MAAMC,2BAA2B,GAAGN,cAAc,CACvD,CAACI,iBAAD,CADuD,EAEvD;AACCC,WAAD,IACEA,WAAW,GACPE,MAAM,CAACC,IAAP,CAAYH,WAAZ,EAAyBI,GAAzB,CACGC,aAAD,IAAmBL,WAAW,CAACK,aAAD,CADhC,CADO,GAIP,EARiD,CAAlD;AAWP,OAAO,MAAMC,gBAAgB,GAAIC,kBAAD,IAC9BZ,cAAc,CAAC,CAACI,iBAAD,CAAD,EAAuBC,WAAD,IAClCA,WAAW,GAAGA,WAAW,CAACO,kBAAD,CAAd,GAAqC,IADpC,CADT;AAKP,OAAO,MAAMC,0BAA0B,GAAGb,cAAc,CACtD,CAACC,UAAD,CADsD,EAErDE,IAAD,IAAUA,IAAI,CAACW,UAFuC,CAAjD;AAKP;;;;AAGA;;;;;;AAKA,OAAO,MAAMC,yBAAyB,GAAGf,cAAc,CACrD,CAACC,UAAD,CADqD;AAErD;;AAECE,IAAD,IAAU,CAAC,CAACA,IAAI,CAACE,WAJoC,CAAhD","sourcesContent":["import { createSelector } from \"reselect\";\r\n\r\nconst selectShop = (state) => state.shop;\r\n\r\nexport const selectCollections = createSelector(\r\n  [selectShop],\r\n  (shop) => shop.collections\r\n);\r\n\r\nexport const selectCollectionsForPreview = createSelector(\r\n  [selectCollections],\r\n  // Get all the keys of an object thatt we pass to it and gives it to us in an array\r\n  (collections) =>\r\n    collections\r\n      ? Object.keys(collections).map(\r\n          (collectionKey) => collections[collectionKey]\r\n        )\r\n      : []\r\n);\r\n\r\nexport const selectCollection = (collectionUrlParam) =>\r\n  createSelector([selectCollections], (collections) =>\r\n    collections ? collections[collectionUrlParam] : null\r\n  );\r\n\r\nexport const selectIsCollectionFetching = createSelector(\r\n  [selectShop],\r\n  (shop) => shop.isFetching\r\n);\r\n\r\n/* Make new selector to avoid error of throwing collectionIem because\r\nit sees the isFetching property from shopReducer as false\r\nwhen we reload the page*/\r\n/* there are many ways to solve this problem, but the solution with \r\nselector is just more scalable as it provides \r\nthe same solution for any other component\r\n that tries to access the same state so you dont need to write \r\n the same solution in other component */\r\nexport const selectIsCollectionsLoaded = createSelector(\r\n  [selectShop],\r\n  /* Check if the collection is null, if collections is loading we get true\r\n  otherwise we get false*/\r\n  (shop) => !!shop.collections\r\n);\r\n"]},"metadata":{},"sourceType":"module"}