{"ast":null,"code":"import ShopActionTypes from \"./shop.types\";\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\nexport const fetchCollectionsStart = () => {\n  return {\n    type: ShopActionTypes.FETCH_COLLECTIONS_START\n  };\n};\nexport const fetchCollectionsSuccess = collectionsMap => {\n  return {\n    type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n    payload: collectionsMap\n  };\n};\nexport const fetchCollectionsFailure = errorMessage => {\n  return {\n    type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n    payload: errorMessage\n  };\n}; // Actual function that we pass to the components to begin\n\nexport const fetchCollectionsStartAsync = () => {\n  // It gives us back the dispach so we can do synchronous actions for the root reducer\n  return dispatch => {\n    const collectionRef = firestore.collection(\"collections\"); // We can do this due to thunk library\n    // Dispatch the normal actions (objects) to the reducer\n\n    dispatch(fetchCollectionsStart());\n    collectionRef.get().then(snapshot => {\n      // snapshot = collections\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      dispatch(fetchCollectionsSuccess(collectionsMap));\n    }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n  };\n};","map":{"version":3,"sources":["C:/Users/Julian/crwn-clothing/client/src/redux/shop/shop.actions.js"],"names":["ShopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsStart","type","FETCH_COLLECTIONS_START","fetchCollectionsSuccess","collectionsMap","FETCH_COLLECTIONS_SUCCESS","payload","fetchCollectionsFailure","errorMessage","FETCH_COLLECTIONS_FAILURE","fetchCollectionsStartAsync","dispatch","collectionRef","collection","get","then","snapshot","catch","error","message"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AACA,SACEC,SADF,EAEEC,+BAFF,QAGO,+BAHP;AAKA,OAAO,MAAMC,qBAAqB,GAAG,MAAM;AACzC,SAAO;AACLC,IAAAA,IAAI,EAAEJ,eAAe,CAACK;AADjB,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMC,uBAAuB,GAAIC,cAAD,IAAoB;AACzD,SAAO;AACLH,IAAAA,IAAI,EAAEJ,eAAe,CAACQ,yBADjB;AAELC,IAAAA,OAAO,EAAEF;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,MAAMG,uBAAuB,GAAIC,YAAD,IAAkB;AACvD,SAAO;AACLP,IAAAA,IAAI,EAAEJ,eAAe,CAACY,yBADjB;AAELH,IAAAA,OAAO,EAAEE;AAFJ,GAAP;AAID,CALM,C,CAOP;;AACA,OAAO,MAAME,0BAA0B,GAAG,MAAM;AAC9C;AACA,SAAQC,QAAD,IAAc;AACnB,UAAMC,aAAa,GAAGd,SAAS,CAACe,UAAV,CAAqB,aAArB,CAAtB,CADmB,CAEnB;AACA;;AACAF,IAAAA,QAAQ,CAACX,qBAAqB,EAAtB,CAAR;AAEAY,IAAAA,aAAa,CACVE,GADH,GAEGC,IAFH,CAESC,QAAD,IAAc;AAClB;AACA,YAAMZ,cAAc,GAAGL,+BAA+B,CAACiB,QAAD,CAAtD;AACAL,MAAAA,QAAQ,CAACR,uBAAuB,CAACC,cAAD,CAAxB,CAAR;AACD,KANH,EAOGa,KAPH,CAOUC,KAAD,IAAWP,QAAQ,CAACJ,uBAAuB,CAACW,KAAK,CAACC,OAAP,CAAxB,CAP5B;AAQD,GAdD;AAeD,CAjBM","sourcesContent":["import ShopActionTypes from \"./shop.types\";\r\nimport {\r\n  firestore,\r\n  convertCollectionsSnapshotToMap,\r\n} from \"../../firebase/firebase.utils\";\r\n\r\nexport const fetchCollectionsStart = () => {\r\n  return {\r\n    type: ShopActionTypes.FETCH_COLLECTIONS_START,\r\n  };\r\n};\r\n\r\nexport const fetchCollectionsSuccess = (collectionsMap) => {\r\n  return {\r\n    type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\r\n    payload: collectionsMap,\r\n  };\r\n};\r\n\r\nexport const fetchCollectionsFailure = (errorMessage) => {\r\n  return {\r\n    type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\r\n    payload: errorMessage,\r\n  };\r\n};\r\n\r\n// Actual function that we pass to the components to begin\r\nexport const fetchCollectionsStartAsync = () => {\r\n  // It gives us back the dispach so we can do synchronous actions for the root reducer\r\n  return (dispatch) => {\r\n    const collectionRef = firestore.collection(\"collections\");\r\n    // We can do this due to thunk library\r\n    // Dispatch the normal actions (objects) to the reducer\r\n    dispatch(fetchCollectionsStart());\r\n\r\n    collectionRef\r\n      .get()\r\n      .then((snapshot) => {\r\n        // snapshot = collections\r\n        const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n        dispatch(fetchCollectionsSuccess(collectionsMap));\r\n      })\r\n      .catch((error) => dispatch(fetchCollectionsFailure(error.message)));\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}