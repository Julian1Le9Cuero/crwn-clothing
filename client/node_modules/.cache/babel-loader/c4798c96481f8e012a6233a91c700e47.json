{"ast":null,"code":"/* Add middleware to the store because whenever actions get fired/dispatched\r\nwe can catch them and then display them.\r\n*/\nimport { createStore, applyMiddleware } from \"redux\";\nimport { logger } from \"redux-logger\";\nimport { persistStore } from \"redux-persist\"; // import thunk from \"redux-thunk\"; We dont need it because of sagas\n\nimport createSagaMiddleware from \"redux-saga\";\nimport rootSaga from \"./root-saga\";\nimport rootReducer from \"./root-reducer\"; // The middleware that the store expects will be an array\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [sagaMiddleware];\n\nif (process.env.NODE_ENV === \"development\") {\n  middlewares.push(logger);\n} // This returns the store object\n\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\n/* After applyMiddleware is called we will run and add in the individual sagas\r\nthat we're going to write*/\n\nsagaMiddleware.run(rootSaga);\nexport const persistor = persistStore(store);\nexport default {\n  store,\n  persistor\n};","map":{"version":3,"sources":["C:/Users/Julian/crwn-clothing/client/src/redux/store.js"],"names":["createStore","applyMiddleware","logger","persistStore","createSagaMiddleware","rootSaga","rootReducer","sagaMiddleware","middlewares","process","env","NODE_ENV","push","store","run","persistor"],"mappings":"AAAA;;;AAGA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,YAAT,QAA6B,eAA7B,C,CACA;;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,OAAOC,QAAP,MAAqB,aAArB;AAEA,OAAOC,WAAP,MAAwB,gBAAxB,C,CACA;;AACA,MAAMC,cAAc,GAAGH,oBAAoB,EAA3C;AAEA,MAAMI,WAAW,GAAG,CAACD,cAAD,CAApB;;AAEA,IAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AAC1CH,EAAAA,WAAW,CAACI,IAAZ,CAAiBV,MAAjB;AACD,C,CACD;;;AACA,OAAO,MAAMW,KAAK,GAAGb,WAAW,CAACM,WAAD,EAAcL,eAAe,CAAC,GAAGO,WAAJ,CAA7B,CAAzB;AAEP;;;AAGAD,cAAc,CAACO,GAAf,CAAmBT,QAAnB;AAEA,OAAO,MAAMU,SAAS,GAAGZ,YAAY,CAACU,KAAD,CAA9B;AAEP,eAAe;AAAEA,EAAAA,KAAF;AAASE,EAAAA;AAAT,CAAf","sourcesContent":["/* Add middleware to the store because whenever actions get fired/dispatched\r\nwe can catch them and then display them.\r\n*/\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport { logger } from \"redux-logger\";\r\nimport { persistStore } from \"redux-persist\";\r\n// import thunk from \"redux-thunk\"; We dont need it because of sagas\r\nimport createSagaMiddleware from \"redux-saga\";\r\n\r\nimport rootSaga from \"./root-saga\";\r\n\r\nimport rootReducer from \"./root-reducer\";\r\n// The middleware that the store expects will be an array\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst middlewares = [sagaMiddleware];\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  middlewares.push(logger);\r\n}\r\n// This returns the store object\r\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\r\n\r\n/* After applyMiddleware is called we will run and add in the individual sagas\r\nthat we're going to write*/\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport const persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n"]},"metadata":{},"sourceType":"module"}