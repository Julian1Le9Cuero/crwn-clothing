{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Julian\\\\crwn-clothing\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst config = {\n  apiKey: \"AIzaSyA2EErk3L3Bf3L3pc3PgY3ojn7Gouf3BoQ\",\n  authDomain: \"crwn-db-2ad1d.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-2ad1d.firebaseio.com\",\n  projectId: \"crwn-db-2ad1d\",\n  storageBucket: \"crwn-db-2ad1d.appspot.com\",\n  messagingSenderId: \"658481636483\",\n  appId: \"1:658481636483:web:526540a6a27c89ca0367b6\"\n}; // This will be asynchronous because we're making an API request\n// Pass the logged in user (userAuth) and any additional daa that we may need\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  // if the userAuth object does not exist, exit the funcion using return\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get(); // If it already exists query the firestore for the document\n  // If snapshot does not exists then create a piece of data there\n\n  if (!snapShot.exists) {\n    // 1. What are the properties that we want to store\n    const displayName = userAuth.displayName,\n          email = userAuth.email; // 2. Know inside the db when we made the document\n\n    const createdAt = new Date(); // 3. Use try/catch because this is async and we may get a rejection\n\n    try {\n      await userRef.set(_objectSpread({\n        displayName,\n        email,\n        createdAt\n      }, additionalData));\n    } catch (err) {\n      console.log(\"Error creating user\", err.message);\n    }\n  }\n\n  return userRef; //We may use this document reference to do othe things\n};\nfirebase.initializeApp(config);\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const _doc$data = doc.data(),\n          title = _doc$data.title,\n          items = _doc$data.items;\n\n    return {\n      //  Pass the title because it is the same string in the routing\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection; // Return acc so that it goes to the next iteration in the reduce\n\n    return accumulator;\n  }, {});\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(object => {\n    const newDocRef = collectionRef.doc(); //We want the key to be unique, so we just let firestore to do that, it's not necessary to pass object.title as a parameter\n\n    batch.set(newDocRef, object); // Pass the document reference and the value we ant to set it to\n  }); // Fire of the batch reference, this returns a promise\n\n  return await batch.commit();\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      console.log(\"User = \", userAuth);\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); // google authentication utility\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider(); // Always trigger the google pop up whenever we use the google auth provider for auth and sign in\n\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider); // in case we need the whole library\n\nexport default firebase;","map":{"version":3,"sources":["C:/Users/Julian/crwn-clothing/client/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","err","console","log","message","initializeApp","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","data","title","items","routeName","encodeURI","toLowerCase","id","reduce","accumulator","collection","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","batch","forEach","object","newDocRef","commit","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/auth\";\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyA2EErk3L3Bf3L3pc3PgY3ojn7Gouf3BoQ\",\r\n  authDomain: \"crwn-db-2ad1d.firebaseapp.com\",\r\n  databaseURL: \"https://crwn-db-2ad1d.firebaseio.com\",\r\n  projectId: \"crwn-db-2ad1d\",\r\n  storageBucket: \"crwn-db-2ad1d.appspot.com\",\r\n  messagingSenderId: \"658481636483\",\r\n  appId: \"1:658481636483:web:526540a6a27c89ca0367b6\",\r\n};\r\n\r\n// This will be asynchronous because we're making an API request\r\n// Pass the logged in user (userAuth) and any additional daa that we may need\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n  // if the userAuth object does not exist, exit the funcion using return\r\n  if (!userAuth) return;\r\n\r\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n  const snapShot = await userRef.get();\r\n  // If it already exists query the firestore for the document\r\n  // If snapshot does not exists then create a piece of data there\r\n  if (!snapShot.exists) {\r\n    // 1. What are the properties that we want to store\r\n    const { displayName, email } = userAuth;\r\n    // 2. Know inside the db when we made the document\r\n    const createdAt = new Date();\r\n    // 3. Use try/catch because this is async and we may get a rejection\r\n    try {\r\n      await userRef.set({\r\n        displayName,\r\n        email,\r\n        createdAt,\r\n        ...additionalData,\r\n      });\r\n    } catch (err) {\r\n      console.log(\"Error creating user\", err.message);\r\n    }\r\n  }\r\n\r\n  return userRef; //We may use this document reference to do othe things\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const convertCollectionsSnapshotToMap = (collections) => {\r\n  const transformedCollection = collections.docs.map((doc) => {\r\n    const { title, items } = doc.data();\r\n    return {\r\n      //  Pass the title because it is the same string in the routing\r\n      routeName: encodeURI(title.toLowerCase()),\r\n      id: doc.id,\r\n      title,\r\n      items,\r\n    };\r\n  });\r\n\r\n  return transformedCollection.reduce((accumulator, collection) => {\r\n    accumulator[collection.title.toLowerCase()] = collection;\r\n    // Return acc so that it goes to the next iteration in the reduce\r\n    return accumulator;\r\n  }, {});\r\n};\r\n\r\nexport const addCollectionAndDocuments = async (\r\n  collectionKey,\r\n  objectsToAdd\r\n) => {\r\n  const collectionRef = firestore.collection(collectionKey);\r\n\r\n  const batch = firestore.batch();\r\n  objectsToAdd.forEach((object) => {\r\n    const newDocRef = collectionRef.doc(); //We want the key to be unique, so we just let firestore to do that, it's not necessary to pass object.title as a parameter\r\n    batch.set(newDocRef, object); // Pass the document reference and the value we ant to set it to\r\n  });\r\n  // Fire of the batch reference, this returns a promise\r\n  return await batch.commit();\r\n};\r\n\r\nexport const getCurrentUser = () => {\r\n  return new Promise((resolve, reject) => {\r\n    const unsubscribe = auth.onAuthStateChanged((userAuth) => {\r\n      console.log(\"User = \", userAuth);\r\n\r\n      unsubscribe();\r\n      resolve(userAuth);\r\n    }, reject);\r\n  });\r\n};\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\n// google authentication utility\r\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\r\n// Always trigger the google pop up whenever we use the google auth provider for auth and sign in\r\ngoogleProvider.setCustomParameters({ prompt: \"select_account\" });\r\n\r\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\r\n// in case we need the whole library\r\nexport default firebase;\r\n"]},"metadata":{},"sourceType":"module"}