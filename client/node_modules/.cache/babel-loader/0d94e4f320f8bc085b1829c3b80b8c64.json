{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Julian\\\\crwn-clothing\\\\client\\\\src\\\\pages\\\\shoppage\\\\shop.component.jsx\";\nimport React, { useEffect } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { fetchCollectionsStart } from \"../../redux/shop/shop.actions\";\nimport CollectionsOverviewContainer from \"../../components/collections-overview/collections-overview.container\";\nimport CollectionPageContainer from \"../collection/collection.component.container\";\n\nconst ShopPage = ({\n  fetchCollectionsStart,\n  match\n}) => {\n  useEffect(() => {\n    /* We are passing the fetchCollectionsStart as prop, therefore\r\n    useEffect expects it to change, so we just pass it as a second argument\r\n    an empty array would also work but we pass the action, otherwise we will get a warning\r\n    because the function is a PROP!\r\n    */\n    fetchCollectionsStart();\n  }, [fetchCollectionsStart]);\n  return React.createElement(\"div\", {\n    className: \"shop-page\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(Route, {\n    exact: true,\n    path: `${match.path}`,\n    component: CollectionsOverviewContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }), React.createElement(Route, {\n    path: `${match.path}/:collectionId`,\n    component: CollectionPageContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }));\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchCollectionsStart: () => dispatch(fetchCollectionsStart())\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(ShopPage);\n\nfunction* gen(i) {\n  yield i;\n  yield i + 25;\n}\n\nconst g = gen(8);\ng.next();","map":{"version":3,"sources":["C:/Users/Julian/crwn-clothing/client/src/pages/shoppage/shop.component.jsx"],"names":["React","useEffect","Route","connect","fetchCollectionsStart","CollectionsOverviewContainer","CollectionPageContainer","ShopPage","match","path","mapDispatchToProps","dispatch","gen","i","g","next"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,qBAAT,QAAsC,+BAAtC;AAEA,OAAOC,4BAAP,MAAyC,sEAAzC;AACA,OAAOC,uBAAP,MAAoC,8CAApC;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEH,EAAAA,qBAAF;AAAyBI,EAAAA;AAAzB,CAAD,KAAsC;AACrDP,EAAAA,SAAS,CAAC,MAAM;AACd;;;;;AAKAG,IAAAA,qBAAqB;AACtB,GAPQ,EAON,CAACA,qBAAD,CAPM,CAAT;AASA,SACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AACE,IAAA,KAAK,MADP;AAEE,IAAA,IAAI,EAAG,GAAEI,KAAK,CAACC,IAAK,EAFtB;AAGE,IAAA,SAAS,EAAEJ,4BAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAME,oBAAC,KAAD;AACE,IAAA,IAAI,EAAG,GAAEG,KAAK,CAACC,IAAK,gBADtB;AAEE,IAAA,SAAS,EAAEH,uBAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF;AAaD,CAvBD;;AAyBA,MAAMI,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLP,IAAAA,qBAAqB,EAAE,MAAMO,QAAQ,CAACP,qBAAqB,EAAtB;AADhC,GAAP;AAGD,CAJD;;AAMA,eAAeD,OAAO,CAAC,IAAD,EAAOO,kBAAP,CAAP,CAAkCH,QAAlC,CAAf;;AAEA,UAAUK,GAAV,CAAcC,CAAd,EAAiB;AACf,QAAMA,CAAN;AACA,QAAMA,CAAC,GAAG,EAAV;AACD;;AAED,MAAMC,CAAC,GAAGF,GAAG,CAAC,CAAD,CAAb;AACAE,CAAC,CAACC,IAAF","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { fetchCollectionsStart } from \"../../redux/shop/shop.actions\";\r\n\r\nimport CollectionsOverviewContainer from \"../../components/collections-overview/collections-overview.container\";\r\nimport CollectionPageContainer from \"../collection/collection.component.container\";\r\n\r\nconst ShopPage = ({ fetchCollectionsStart, match }) => {\r\n  useEffect(() => {\r\n    /* We are passing the fetchCollectionsStart as prop, therefore\r\n    useEffect expects it to change, so we just pass it as a second argument\r\n    an empty array would also work but we pass the action, otherwise we will get a warning\r\n    because the function is a PROP!\r\n    */\r\n    fetchCollectionsStart();\r\n  }, [fetchCollectionsStart]);\r\n\r\n  return (\r\n    <div className=\"shop-page\">\r\n      <Route\r\n        exact\r\n        path={`${match.path}`}\r\n        component={CollectionsOverviewContainer}\r\n      />\r\n      <Route\r\n        path={`${match.path}/:collectionId`}\r\n        component={CollectionPageContainer}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    fetchCollectionsStart: () => dispatch(fetchCollectionsStart()),\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(ShopPage);\r\n\r\nfunction* gen(i) {\r\n  yield i;\r\n  yield i + 25;\r\n}\r\n\r\nconst g = gen(8);\r\ng.next();\r\n"]},"metadata":{},"sourceType":"module"}