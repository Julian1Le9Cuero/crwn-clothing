{"ast":null,"code":"// Holds the saga code related to the shop component\n// Effects library that will be used to compose the saga code\nimport { takeEvery, call, put, all } from \"redux-saga/effects\";\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\nimport { fetchCollectionsFailure, fetchCollectionsSuccess } from \"./shop.actions\"; // Import the specific action types from our actions file\n\nimport ShopActionTypes from \"./shop.types\";\nexport function* fetchCollectionsAsync() {\n  try {\n    const collectionRef = firestore.collection(\"collections\");\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  }\n} // Write first base saga\n\n/*This will pause whenever a specific action type comes */\n\nexport function* fetchCollectionsStart() {\n  // The first parameter of takeEvery if the action type\n\n  /* The second parameter is another generator function tha will run the response to the takeEveryListener\r\n    this is how we're able to run MORE CODE depending on the action type*/\n  // takeEvery does not pause the JS code waiting for anyhing inside the fetchCollectionsAsync to come back with something\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}\nexport function* shopSagas() {\n  yield all([call(fetchCollectionsStart)]);\n}","map":{"version":3,"sources":["C:/Users/Julian/crwn-clothing/client/src/redux/shop/shop.sagas.js"],"names":["takeEvery","call","put","all","firestore","convertCollectionsSnapshotToMap","fetchCollectionsFailure","fetchCollectionsSuccess","ShopActionTypes","fetchCollectionsAsync","collectionRef","collection","snapshot","get","collectionsMap","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START","shopSagas"],"mappings":"AAAA;AACA;AACA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,GAA/B,QAA0C,oBAA1C;AAEA,SACEC,SADF,EAEEC,+BAFF,QAGO,+BAHP;AAKA,SACEC,uBADF,EAEEC,uBAFF,QAGO,gBAHP,C,CAIA;;AACA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AACvC,MAAI;AACF,UAAMC,aAAa,GAAGN,SAAS,CAACO,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMb,IAAI,CAC/BI,+BAD+B,EAE/BO,QAF+B,CAAjC;AAIA,UAAMV,GAAG,CAACK,uBAAuB,CAACO,cAAD,CAAxB,CAAT;AACD,GARD,CAQE,OAAOC,KAAP,EAAc;AACd,UAAMb,GAAG,CAACI,uBAAuB,CAACS,KAAK,CAACC,OAAP,CAAxB,CAAT;AACD;AACF,C,CACD;;AACA;;AACA,OAAO,UAAUC,qBAAV,GAAkC;AACvC;;AACA;;AAEA;AACA,QAAMjB,SAAS,CACbQ,eAAe,CAACU,uBADH,EAEbT,qBAFa,CAAf;AAID;AAED,OAAO,UAAUU,SAAV,GAAsB;AAC3B,QAAMhB,GAAG,CAAC,CAACF,IAAI,CAACgB,qBAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["// Holds the saga code related to the shop component\r\n// Effects library that will be used to compose the saga code\r\nimport { takeEvery, call, put, all } from \"redux-saga/effects\";\r\n\r\nimport {\r\n  firestore,\r\n  convertCollectionsSnapshotToMap,\r\n} from \"../../firebase/firebase.utils\";\r\n\r\nimport {\r\n  fetchCollectionsFailure,\r\n  fetchCollectionsSuccess,\r\n} from \"./shop.actions\";\r\n// Import the specific action types from our actions file\r\nimport ShopActionTypes from \"./shop.types\";\r\n\r\nexport function* fetchCollectionsAsync() {\r\n  try {\r\n    const collectionRef = firestore.collection(\"collections\");\r\n    const snapshot = yield collectionRef.get();\r\n    const collectionsMap = yield call(\r\n      convertCollectionsSnapshotToMap,\r\n      snapshot\r\n    );\r\n    yield put(fetchCollectionsSuccess(collectionsMap));\r\n  } catch (error) {\r\n    yield put(fetchCollectionsFailure(error.message));\r\n  }\r\n}\r\n// Write first base saga\r\n/*This will pause whenever a specific action type comes */\r\nexport function* fetchCollectionsStart() {\r\n  // The first parameter of takeEvery if the action type\r\n  /* The second parameter is another generator function tha will run the response to the takeEveryListener\r\n    this is how we're able to run MORE CODE depending on the action type*/\r\n  // takeEvery does not pause the JS code waiting for anyhing inside the fetchCollectionsAsync to come back with something\r\n  yield takeEvery(\r\n    ShopActionTypes.FETCH_COLLECTIONS_START,\r\n    fetchCollectionsAsync\r\n  );\r\n}\r\n\r\nexport function* shopSagas() {\r\n  yield all([call(fetchCollectionsStart)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}